{
  "contract_name": "btc-light-client",
  "contract_version": "0.14.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "btc_confirmation_depth",
      "checkpoint_finalization_timeout",
      "network"
    ],
    "properties": {
      "btc_confirmation_depth": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "checkpoint_finalization_timeout": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "network": {
        "$ref": "#/definitions/Network"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Network": {
        "type": "string",
        "enum": [
          "mainnet",
          "testnet",
          "signet",
          "regtest"
        ]
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Add BTC headers to the light client. If not initialized, this will initialize the light client with the provided headers. Otherwise, it will update the existing chain with the new headers.",
        "type": "object",
        "required": [
          "btc_headers"
        ],
        "properties": {
          "btc_headers": {
            "type": "object",
            "required": [
              "headers"
            ],
            "properties": {
              "first_height": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "first_work": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "headers": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/BtcHeader"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "BtcHeader": {
        "description": "Bitcoin header.\n\nContains all the block's information except the actual transactions, but including a root of a [merkle tree] committing to all transactions in the block.\n\nThis struct is for use in RPC requests and responses. It has convenience trait impls to convert to the internal representation (`BlockHeader`), and to the Babylon extended representation (`BtcHeaderInfo`). Adapted from `BlockHeader`.",
        "type": "object",
        "required": [
          "bits",
          "merkle_root",
          "nonce",
          "prev_blockhash",
          "time",
          "version"
        ],
        "properties": {
          "bits": {
            "description": "The target value below which the blockhash must lie, encoded as a a float (with well-defined rounding, of course).",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "merkle_root": {
            "description": "The root hash of the merkle tree of transactions in the block. Encoded as a (byte-reversed) hex string.",
            "type": "string"
          },
          "nonce": {
            "description": "The nonce, selected to obtain a low enough blockhash.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "prev_blockhash": {
            "description": "Reference to the previous block in the chain. Encoded as a (byte-reversed) hex string.",
            "type": "string"
          },
          "time": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "version": {
            "description": "Originally protocol version, but repurposed for soft-fork signaling.\n\n### Relevant BIPs\n\n* [BIP9 - Version bits with timeout and delay](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki) (current usage) * [BIP34 - Block v2, Height in Coinbase](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)",
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "btc_base_header"
        ],
        "properties": {
          "btc_base_header": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "btc_tip_header"
        ],
        "properties": {
          "btc_tip_header": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "btc_header"
        ],
        "properties": {
          "btc_header": {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "btc_header_by_hash"
        ],
        "properties": {
          "btc_header_by_hash": {
            "type": "object",
            "required": [
              "hash"
            ],
            "properties": {
              "hash": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "btc_headers"
        ],
        "properties": {
          "btc_headers": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "reverse": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "btc_base_header": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BtcHeaderResponse",
      "description": "Bitcoin header response.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert from the internal representation (`BtcHeaderInfo`), and to the Babylon extended representation\n\nAdapted from `BtcHeaderInfo`.",
      "type": "object",
      "required": [
        "cum_work",
        "hash",
        "header",
        "height"
      ],
      "properties": {
        "cum_work": {
          "description": "The cumulative total work of this block and all of its ancestors.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint256"
            }
          ]
        },
        "hash": {
          "description": "`hash` is the hash of the BTC header. Encoded as a (byte-reversed) hex string.",
          "type": "string"
        },
        "header": {
          "description": "The Bitcoin header.",
          "allOf": [
            {
              "$ref": "#/definitions/BtcHeader"
            }
          ]
        },
        "height": {
          "description": "The height of the block in the BTC blockchain.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "BtcHeader": {
          "description": "Bitcoin header.\n\nContains all the block's information except the actual transactions, but including a root of a [merkle tree] committing to all transactions in the block.\n\nThis struct is for use in RPC requests and responses. It has convenience trait impls to convert to the internal representation (`BlockHeader`), and to the Babylon extended representation (`BtcHeaderInfo`). Adapted from `BlockHeader`.",
          "type": "object",
          "required": [
            "bits",
            "merkle_root",
            "nonce",
            "prev_blockhash",
            "time",
            "version"
          ],
          "properties": {
            "bits": {
              "description": "The target value below which the blockhash must lie, encoded as a a float (with well-defined rounding, of course).",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "merkle_root": {
              "description": "The root hash of the merkle tree of transactions in the block. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "nonce": {
              "description": "The nonce, selected to obtain a low enough blockhash.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "prev_blockhash": {
              "description": "Reference to the previous block in the chain. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "time": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "version": {
              "description": "Originally protocol version, but repurposed for soft-fork signaling.\n\n### Relevant BIPs\n\n* [BIP9 - Version bits with timeout and delay](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki) (current usage) * [BIP34 - Block v2, Height in Coinbase](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    },
    "btc_header": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BtcHeaderResponse",
      "description": "Bitcoin header response.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert from the internal representation (`BtcHeaderInfo`), and to the Babylon extended representation\n\nAdapted from `BtcHeaderInfo`.",
      "type": "object",
      "required": [
        "cum_work",
        "hash",
        "header",
        "height"
      ],
      "properties": {
        "cum_work": {
          "description": "The cumulative total work of this block and all of its ancestors.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint256"
            }
          ]
        },
        "hash": {
          "description": "`hash` is the hash of the BTC header. Encoded as a (byte-reversed) hex string.",
          "type": "string"
        },
        "header": {
          "description": "The Bitcoin header.",
          "allOf": [
            {
              "$ref": "#/definitions/BtcHeader"
            }
          ]
        },
        "height": {
          "description": "The height of the block in the BTC blockchain.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "BtcHeader": {
          "description": "Bitcoin header.\n\nContains all the block's information except the actual transactions, but including a root of a [merkle tree] committing to all transactions in the block.\n\nThis struct is for use in RPC requests and responses. It has convenience trait impls to convert to the internal representation (`BlockHeader`), and to the Babylon extended representation (`BtcHeaderInfo`). Adapted from `BlockHeader`.",
          "type": "object",
          "required": [
            "bits",
            "merkle_root",
            "nonce",
            "prev_blockhash",
            "time",
            "version"
          ],
          "properties": {
            "bits": {
              "description": "The target value below which the blockhash must lie, encoded as a a float (with well-defined rounding, of course).",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "merkle_root": {
              "description": "The root hash of the merkle tree of transactions in the block. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "nonce": {
              "description": "The nonce, selected to obtain a low enough blockhash.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "prev_blockhash": {
              "description": "Reference to the previous block in the chain. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "time": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "version": {
              "description": "Originally protocol version, but repurposed for soft-fork signaling.\n\n### Relevant BIPs\n\n* [BIP9 - Version bits with timeout and delay](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki) (current usage) * [BIP34 - Block v2, Height in Coinbase](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    },
    "btc_header_by_hash": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BtcHeaderResponse",
      "description": "Bitcoin header response.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert from the internal representation (`BtcHeaderInfo`), and to the Babylon extended representation\n\nAdapted from `BtcHeaderInfo`.",
      "type": "object",
      "required": [
        "cum_work",
        "hash",
        "header",
        "height"
      ],
      "properties": {
        "cum_work": {
          "description": "The cumulative total work of this block and all of its ancestors.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint256"
            }
          ]
        },
        "hash": {
          "description": "`hash` is the hash of the BTC header. Encoded as a (byte-reversed) hex string.",
          "type": "string"
        },
        "header": {
          "description": "The Bitcoin header.",
          "allOf": [
            {
              "$ref": "#/definitions/BtcHeader"
            }
          ]
        },
        "height": {
          "description": "The height of the block in the BTC blockchain.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "BtcHeader": {
          "description": "Bitcoin header.\n\nContains all the block's information except the actual transactions, but including a root of a [merkle tree] committing to all transactions in the block.\n\nThis struct is for use in RPC requests and responses. It has convenience trait impls to convert to the internal representation (`BlockHeader`), and to the Babylon extended representation (`BtcHeaderInfo`). Adapted from `BlockHeader`.",
          "type": "object",
          "required": [
            "bits",
            "merkle_root",
            "nonce",
            "prev_blockhash",
            "time",
            "version"
          ],
          "properties": {
            "bits": {
              "description": "The target value below which the blockhash must lie, encoded as a a float (with well-defined rounding, of course).",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "merkle_root": {
              "description": "The root hash of the merkle tree of transactions in the block. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "nonce": {
              "description": "The nonce, selected to obtain a low enough blockhash.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "prev_blockhash": {
              "description": "Reference to the previous block in the chain. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "time": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "version": {
              "description": "Originally protocol version, but repurposed for soft-fork signaling.\n\n### Relevant BIPs\n\n* [BIP9 - Version bits with timeout and delay](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki) (current usage) * [BIP34 - Block v2, Height in Coinbase](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    },
    "btc_headers": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BtcHeadersResponse",
      "description": "Bitcoin header responses.\n\nVector of `BtcHeaderResponse`.",
      "type": "object",
      "required": [
        "headers"
      ],
      "properties": {
        "headers": {
          "description": "The Bitcoin headers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BtcHeaderResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "BtcHeader": {
          "description": "Bitcoin header.\n\nContains all the block's information except the actual transactions, but including a root of a [merkle tree] committing to all transactions in the block.\n\nThis struct is for use in RPC requests and responses. It has convenience trait impls to convert to the internal representation (`BlockHeader`), and to the Babylon extended representation (`BtcHeaderInfo`). Adapted from `BlockHeader`.",
          "type": "object",
          "required": [
            "bits",
            "merkle_root",
            "nonce",
            "prev_blockhash",
            "time",
            "version"
          ],
          "properties": {
            "bits": {
              "description": "The target value below which the blockhash must lie, encoded as a a float (with well-defined rounding, of course).",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "merkle_root": {
              "description": "The root hash of the merkle tree of transactions in the block. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "nonce": {
              "description": "The nonce, selected to obtain a low enough blockhash.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "prev_blockhash": {
              "description": "Reference to the previous block in the chain. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "time": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "version": {
              "description": "Originally protocol version, but repurposed for soft-fork signaling.\n\n### Relevant BIPs\n\n* [BIP9 - Version bits with timeout and delay](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki) (current usage) * [BIP34 - Block v2, Height in Coinbase](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "BtcHeaderResponse": {
          "description": "Bitcoin header response.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert from the internal representation (`BtcHeaderInfo`), and to the Babylon extended representation\n\nAdapted from `BtcHeaderInfo`.",
          "type": "object",
          "required": [
            "cum_work",
            "hash",
            "header",
            "height"
          ],
          "properties": {
            "cum_work": {
              "description": "The cumulative total work of this block and all of its ancestors.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint256"
                }
              ]
            },
            "hash": {
              "description": "`hash` is the hash of the BTC header. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "header": {
              "description": "The Bitcoin header.",
              "allOf": [
                {
                  "$ref": "#/definitions/BtcHeader"
                }
              ]
            },
            "height": {
              "description": "The height of the block in the BTC blockchain.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    },
    "btc_tip_header": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BtcHeaderResponse",
      "description": "Bitcoin header response.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert from the internal representation (`BtcHeaderInfo`), and to the Babylon extended representation\n\nAdapted from `BtcHeaderInfo`.",
      "type": "object",
      "required": [
        "cum_work",
        "hash",
        "header",
        "height"
      ],
      "properties": {
        "cum_work": {
          "description": "The cumulative total work of this block and all of its ancestors.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint256"
            }
          ]
        },
        "hash": {
          "description": "`hash` is the hash of the BTC header. Encoded as a (byte-reversed) hex string.",
          "type": "string"
        },
        "header": {
          "description": "The Bitcoin header.",
          "allOf": [
            {
              "$ref": "#/definitions/BtcHeader"
            }
          ]
        },
        "height": {
          "description": "The height of the block in the BTC blockchain.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "BtcHeader": {
          "description": "Bitcoin header.\n\nContains all the block's information except the actual transactions, but including a root of a [merkle tree] committing to all transactions in the block.\n\nThis struct is for use in RPC requests and responses. It has convenience trait impls to convert to the internal representation (`BlockHeader`), and to the Babylon extended representation (`BtcHeaderInfo`). Adapted from `BlockHeader`.",
          "type": "object",
          "required": [
            "bits",
            "merkle_root",
            "nonce",
            "prev_blockhash",
            "time",
            "version"
          ],
          "properties": {
            "bits": {
              "description": "The target value below which the blockhash must lie, encoded as a a float (with well-defined rounding, of course).",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "merkle_root": {
              "description": "The root hash of the merkle tree of transactions in the block. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "nonce": {
              "description": "The nonce, selected to obtain a low enough blockhash.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "prev_blockhash": {
              "description": "Reference to the previous block in the chain. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "time": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "version": {
              "description": "Originally protocol version, but repurposed for soft-fork signaling.\n\n### Relevant BIPs\n\n* [BIP9 - Version bits with timeout and delay](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki) (current usage) * [BIP34 - Block v2, Height in Coinbase](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "btc_confirmation_depth",
        "checkpoint_finalization_timeout",
        "network"
      ],
      "properties": {
        "btc_confirmation_depth": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "checkpoint_finalization_timeout": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "network": {
          "$ref": "#/definitions/Network"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Network": {
          "type": "string",
          "enum": [
            "mainnet",
            "testnet",
            "signet",
            "regtest"
          ]
        }
      }
    }
  }
}
