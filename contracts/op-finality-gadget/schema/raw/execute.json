{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "commit_public_randomness"
      ],
      "properties": {
        "commit_public_randomness": {
          "type": "object",
          "required": [
            "commitment",
            "fp_pubkey_hex",
            "num_pub_rand",
            "signature",
            "start_height"
          ],
          "properties": {
            "commitment": {
              "description": "`commitment` is the commitment of these public randomness values. Currently, it's the root of the Merkle tree that includes the public randomness",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "fp_pubkey_hex": {
              "description": "`fp_pubkey_hex` is the BTC PK of the finality provider that commits the public randomness",
              "type": "string"
            },
            "num_pub_rand": {
              "description": "`num_pub_rand` is the amount of public randomness committed",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "signature": {
              "description": "`signature` is the signature on (start_height || num_pub_rand || commitment) signed by the SK corresponding to `fp_pubkey_hex`. This prevents others committing public randomness on behalf of `fp_pubkey_hex`",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "start_height": {
              "description": "`start_height` is the start block height of the list of public randomness",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Submit Finality Signature.\n\nThis is a message that can be called by a finality provider to submit their finality signature to the Consumer chain. The signature is verified by the Consumer chain using the finality provider's public key\n\nThis message is equivalent to the `MsgAddFinalitySig` message in the Babylon finality protobuf defs.",
      "type": "object",
      "required": [
        "submit_finality_signature"
      ],
      "properties": {
        "submit_finality_signature": {
          "type": "object",
          "required": [
            "block_hash",
            "fp_pubkey_hex",
            "height",
            "proof",
            "pub_rand",
            "signature"
          ],
          "properties": {
            "block_hash": {
              "$ref": "#/definitions/Binary"
            },
            "fp_pubkey_hex": {
              "type": "string"
            },
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "proof": {
              "$ref": "#/definitions/Proof"
            },
            "pub_rand": {
              "$ref": "#/definitions/Binary"
            },
            "signature": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Slashing message.\n\nThis message can be called by the admin only.",
      "type": "object",
      "required": [
        "slashing"
      ],
      "properties": {
        "slashing": {
          "type": "object",
          "required": [
            "evidence",
            "sender"
          ],
          "properties": {
            "evidence": {
              "$ref": "#/definitions/Evidence"
            },
            "sender": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Enable or disable finality gadget.\n\nThis message can be called by the admin only. If disabled, the verifier should bypass the EOTS verification logic, allowing the OP derivation derivation pipeline to pass through. Note this should be implemented in the verifier and is not enforced by the contract itself.",
      "type": "object",
      "required": [
        "set_enabled"
      ],
      "properties": {
        "set_enabled": {
          "type": "object",
          "required": [
            "enabled"
          ],
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_admin"
      ],
      "properties": {
        "update_admin": {
          "type": "object",
          "required": [
            "admin"
          ],
          "properties": {
            "admin": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Evidence": {
      "description": "Evidence is the evidence that a finality provider has signed finality signatures with correct public randomness on two conflicting Babylon headers",
      "type": "object",
      "required": [
        "block_height",
        "canonical_app_hash",
        "canonical_finality_sig",
        "fork_app_hash",
        "fork_finality_sig",
        "fp_btc_pk",
        "pub_rand"
      ],
      "properties": {
        "block_height": {
          "description": "`block_height` is the height of the conflicting blocks",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "canonical_app_hash": {
          "description": "`canonical_app_hash` is the AppHash of the canonical block",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "canonical_finality_sig": {
          "description": "`canonical_finality_sig` is the finality signature to the canonical block, where finality signature is an EOTS signature, i.e., the `s` in a Schnorr signature `(r, s)`. `r` is the public randomness already committed by the finality provider. Deserializes to `SchnorrEOTSSig`",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "fork_app_hash": {
          "description": "`fork_app_hash` is the AppHash of the fork block",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "fork_finality_sig": {
          "description": "`fork_finality_sig` is the finality signature to the fork block, where finality signature is an EOTS signature. Deserializes to `SchnorrEOTSSig`",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "fp_btc_pk": {
          "description": "`fp_btc_pk` is the BTC PK of the finality provider that casts this vote",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "pub_rand": {
          "description": "`pub_rand is` the public randomness the finality provider has committed to. Deserializes to `SchnorrPubRand`",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        }
      },
      "additionalProperties": false
    },
    "Proof": {
      "description": "A `Proof` is a proof of a leaf's existence in a Merkle tree.\n\nThe convention for proofs is to include leaf hashes, but to exclude the root hash. This convention is implemented across IAVL range proofs as well. Keep this consistent unless there's a very good reason to change everything. This affects the generalized proof system as well.\n\nEquivalent to / adapted from cometbft/crypto/merkle/proof.go.",
      "type": "object",
      "required": [
        "aunts",
        "index",
        "leaf_hash",
        "total"
      ],
      "properties": {
        "aunts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Binary"
          }
        },
        "index": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "leaf_hash": {
          "$ref": "#/definitions/Binary"
        },
        "total": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    }
  }
}
