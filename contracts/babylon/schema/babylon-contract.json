{
  "contract_name": "babylon-contract",
  "contract_version": "0.10.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "babylon_tag",
      "btc_confirmation_depth",
      "checkpoint_finalization_timeout",
      "network",
      "notify_cosmos_zone"
    ],
    "properties": {
      "admin": {
        "description": "If set, this will be the Wasm migration / upgrade admin of the BTC staking contract and the BTC finality contract",
        "type": [
          "string",
          "null"
        ]
      },
      "babylon_tag": {
        "description": "babylon_tag is a string encoding four bytes used for identification / tagging of the Babylon zone. NOTE: this is a hex string, not raw bytes",
        "type": "string"
      },
      "btc_confirmation_depth": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "btc_finality_code_id": {
        "description": "If set, this will instantiate a BTC finality contract",
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      },
      "btc_finality_msg": {
        "description": "If set, this will define the instantiation message for the BTC finality contract. This message is opaque to the Babylon contract, and depends on the specific finality contract being instantiated",
        "anyOf": [
          {
            "$ref": "#/definitions/Binary"
          },
          {
            "type": "null"
          }
        ]
      },
      "btc_staking_code_id": {
        "description": "If set, this will instantiate a BTC staking contract for BTC re-staking",
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      },
      "btc_staking_msg": {
        "description": "If set, this will define the instantiation message for the BTC staking contract. This message is opaque to the Babylon contract, and depends on the specific staking contract being instantiated",
        "anyOf": [
          {
            "$ref": "#/definitions/Binary"
          },
          {
            "type": "null"
          }
        ]
      },
      "checkpoint_finalization_timeout": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "consumer_description": {
        "description": "Description of the consumer",
        "type": [
          "string",
          "null"
        ]
      },
      "consumer_name": {
        "description": "Name of the consumer",
        "type": [
          "string",
          "null"
        ]
      },
      "network": {
        "$ref": "#/definitions/Network"
      },
      "notify_cosmos_zone": {
        "description": "notify_cosmos_zone indicates whether to send Cosmos zone messages notifying BTC-finalised headers. NOTE: If set to true, then the Cosmos zone needs to integrate the corresponding message handler as well",
        "type": "boolean"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Network": {
        "type": "string",
        "enum": [
          "mainnet",
          "testnet",
          "signet",
          "regtest"
        ]
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "btc_headers"
        ],
        "properties": {
          "btc_headers": {
            "type": "object",
            "required": [
              "headers"
            ],
            "properties": {
              "headers": {
                "description": "`headers` is a list of BTC headers. Typically: - A given delta of headers a user wants to add to the tip or fork of the BTC chain.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/BtcHeader"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "`slashing` is a slashing event from the BTC staking contract.\n\nThis will be forwarded over IBC to the Babylon side for propagation to other Consumers, and Babylon itself",
        "type": "object",
        "required": [
          "slashing"
        ],
        "properties": {
          "slashing": {
            "type": "object",
            "required": [
              "evidence"
            ],
            "properties": {
              "evidence": {
                "$ref": "#/definitions/Evidence"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "BtcHeader": {
        "description": "Bitcoin header.\n\nContains all the block's information except the actual transactions, but including a root of a [merkle tree] committing to all transactions in the block.\n\nThis struct is for use in RPC requests and responses. It has convenience trait impls to convert to the internal representation (`BlockHeader`), and to the Babylon extended representation (`BtcHeaderInfo`). Adapted from `BlockHeader`.",
        "type": "object",
        "required": [
          "bits",
          "merkle_root",
          "nonce",
          "prev_blockhash",
          "time",
          "version"
        ],
        "properties": {
          "bits": {
            "description": "The target value below which the blockhash must lie, encoded as a a float (with well-defined rounding, of course).",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "merkle_root": {
            "description": "The root hash of the merkle tree of transactions in the block. Encoded as a (byte-reversed) hex string.",
            "type": "string"
          },
          "nonce": {
            "description": "The nonce, selected to obtain a low enough blockhash.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "prev_blockhash": {
            "description": "Reference to the previous block in the chain. Encoded as a (byte-reversed) hex string.",
            "type": "string"
          },
          "time": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "version": {
            "description": "Originally protocol version, but repurposed for soft-fork signaling.\n\n### Relevant BIPs\n\n* [BIP9 - Version bits with timeout and delay](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki) (current usage) * [BIP34 - Block v2, Height in Coinbase](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)",
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Evidence": {
        "description": "Evidence is the evidence that a finality provider has signed finality signatures with correct public randomness on two conflicting Babylon headers",
        "type": "object",
        "required": [
          "block_height",
          "canonical_app_hash",
          "canonical_finality_sig",
          "fork_app_hash",
          "fork_finality_sig",
          "fp_btc_pk",
          "pub_rand"
        ],
        "properties": {
          "block_height": {
            "description": "`block_height` is the height of the conflicting blocks",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "canonical_app_hash": {
            "description": "`canonical_app_hash` is the AppHash of the canonical block",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "canonical_finality_sig": {
            "description": "`canonical_finality_sig` is the finality signature to the canonical block, where finality signature is an EOTS signature, i.e., the `s` in a Schnorr signature `(r, s)`. `r` is the public randomness already committed by the finality provider. Deserializes to `SchnorrEOTSSig`",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "fork_app_hash": {
            "description": "`fork_app_hash` is the AppHash of the fork block",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "fork_finality_sig": {
            "description": "`fork_finality_sig` is the finality signature to the fork block, where finality signature is an EOTS signature. Deserializes to `SchnorrEOTSSig`",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "fp_btc_pk": {
            "description": "`fp_btc_pk` is the BTC PK of the finality provider that casts this vote",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "pub_rand": {
            "description": "`pub_rand is` the public randomness the finality provider has committed to. Deserializes to `SchnorrPubRand`",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Config returns the current configuration of the babylon-contract",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "BtcBaseHeader returns the base BTC header stored in the contract",
        "type": "object",
        "required": [
          "btc_base_header"
        ],
        "properties": {
          "btc_base_header": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "BtcTipHeader returns the tip BTC header stored in the contract",
        "type": "object",
        "required": [
          "btc_tip_header"
        ],
        "properties": {
          "btc_tip_header": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "BtcHeader returns the BTC header information stored in the contract, by BTC height.",
        "type": "object",
        "required": [
          "btc_header"
        ],
        "properties": {
          "btc_header": {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "BtcHeaderByHash returns the BTC header information stored in the contract, by BTC hash.\n\n`hash` is the (byte-reversed) hex-encoded hash of the BTC header",
        "type": "object",
        "required": [
          "btc_header_by_hash"
        ],
        "properties": {
          "btc_header_by_hash": {
            "type": "object",
            "required": [
              "hash"
            ],
            "properties": {
              "hash": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "BtcHeaders returns the canonical BTC chain stored in the contract.\n\n`start_after` is the height of the header to start after, or `None` to start from the base",
        "type": "object",
        "required": [
          "btc_headers"
        ],
        "properties": {
          "btc_headers": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "reverse": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "BabylonBaseEpoch returns the base Babylon epoch stored in the contract",
        "type": "object",
        "required": [
          "babylon_base_epoch"
        ],
        "properties": {
          "babylon_base_epoch": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "BabylonLastEpoch returns the last babylon finalized epoch stored in the contract",
        "type": "object",
        "required": [
          "babylon_last_epoch"
        ],
        "properties": {
          "babylon_last_epoch": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "BabylonEpoch returns the Babylon epoch stored in the contract, by epoch number.",
        "type": "object",
        "required": [
          "babylon_epoch"
        ],
        "properties": {
          "babylon_epoch": {
            "type": "object",
            "required": [
              "epoch_number"
            ],
            "properties": {
              "epoch_number": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "BabylonCheckpoint returns the Babylon checkpoint stored in the contract, by epoch number.",
        "type": "object",
        "required": [
          "babylon_checkpoint"
        ],
        "properties": {
          "babylon_checkpoint": {
            "type": "object",
            "required": [
              "epoch_number"
            ],
            "properties": {
              "epoch_number": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "CzLastHeader returns the last CZ epoch stored in the contract",
        "type": "object",
        "required": [
          "cz_last_header"
        ],
        "properties": {
          "cz_last_header": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "CzHeader returns the CZ header stored in the contract, by CZ height.",
        "type": "object",
        "required": [
          "cz_header"
        ],
        "properties": {
          "cz_header": {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "babylon_base_epoch": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EpochResponse",
      "description": "Babylon epoch.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert to and from the internal representation (`Epoch`). Adapted from `Epoch`.",
      "type": "object",
      "required": [
        "current_epoch_interval",
        "epoch_number",
        "first_block_height",
        "sealer_app_hash",
        "sealer_block_hash"
      ],
      "properties": {
        "current_epoch_interval": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "epoch_number": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "first_block_height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "last_block_time": {
          "description": "last_block_time is the time of the last block in this epoch. Babylon needs to remember the last header's time of each epoch to complete unbonding validators/delegations when a previous epoch's checkpoint is finalised. The last_block_time field is nil in the epoch's beginning, and is set upon the end of this epoch",
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        },
        "sealer_app_hash": {
          "description": "sealer is the last block of the sealed epoch. sealer_app_hash points to the sealer but stored in the first header of the next epoch. Hex-encoded string",
          "type": "string"
        },
        "sealer_block_hash": {
          "description": "sealer_block_hash is the hash of the sealer. The validator set has generated a BLS multisig on the hash, i.e. the hash of the last block in the epoch. Hex-encoded string",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "babylon_checkpoint": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EpochResponse",
      "description": "Babylon epoch.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert to and from the internal representation (`Epoch`). Adapted from `Epoch`.",
      "type": "object",
      "required": [
        "current_epoch_interval",
        "epoch_number",
        "first_block_height",
        "sealer_app_hash",
        "sealer_block_hash"
      ],
      "properties": {
        "current_epoch_interval": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "epoch_number": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "first_block_height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "last_block_time": {
          "description": "last_block_time is the time of the last block in this epoch. Babylon needs to remember the last header's time of each epoch to complete unbonding validators/delegations when a previous epoch's checkpoint is finalised. The last_block_time field is nil in the epoch's beginning, and is set upon the end of this epoch",
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        },
        "sealer_app_hash": {
          "description": "sealer is the last block of the sealed epoch. sealer_app_hash points to the sealer but stored in the first header of the next epoch. Hex-encoded string",
          "type": "string"
        },
        "sealer_block_hash": {
          "description": "sealer_block_hash is the hash of the sealer. The validator set has generated a BLS multisig on the hash, i.e. the hash of the last block in the epoch. Hex-encoded string",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "babylon_epoch": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EpochResponse",
      "description": "Babylon epoch.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert to and from the internal representation (`Epoch`). Adapted from `Epoch`.",
      "type": "object",
      "required": [
        "current_epoch_interval",
        "epoch_number",
        "first_block_height",
        "sealer_app_hash",
        "sealer_block_hash"
      ],
      "properties": {
        "current_epoch_interval": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "epoch_number": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "first_block_height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "last_block_time": {
          "description": "last_block_time is the time of the last block in this epoch. Babylon needs to remember the last header's time of each epoch to complete unbonding validators/delegations when a previous epoch's checkpoint is finalised. The last_block_time field is nil in the epoch's beginning, and is set upon the end of this epoch",
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        },
        "sealer_app_hash": {
          "description": "sealer is the last block of the sealed epoch. sealer_app_hash points to the sealer but stored in the first header of the next epoch. Hex-encoded string",
          "type": "string"
        },
        "sealer_block_hash": {
          "description": "sealer_block_hash is the hash of the sealer. The validator set has generated a BLS multisig on the hash, i.e. the hash of the last block in the epoch. Hex-encoded string",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "babylon_last_epoch": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EpochResponse",
      "description": "Babylon epoch.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert to and from the internal representation (`Epoch`). Adapted from `Epoch`.",
      "type": "object",
      "required": [
        "current_epoch_interval",
        "epoch_number",
        "first_block_height",
        "sealer_app_hash",
        "sealer_block_hash"
      ],
      "properties": {
        "current_epoch_interval": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "epoch_number": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "first_block_height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "last_block_time": {
          "description": "last_block_time is the time of the last block in this epoch. Babylon needs to remember the last header's time of each epoch to complete unbonding validators/delegations when a previous epoch's checkpoint is finalised. The last_block_time field is nil in the epoch's beginning, and is set upon the end of this epoch",
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        },
        "sealer_app_hash": {
          "description": "sealer is the last block of the sealed epoch. sealer_app_hash points to the sealer but stored in the first header of the next epoch. Hex-encoded string",
          "type": "string"
        },
        "sealer_block_hash": {
          "description": "sealer_block_hash is the hash of the sealer. The validator set has generated a BLS multisig on the hash, i.e. the hash of the last block in the epoch. Hex-encoded string",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "btc_base_header": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BtcHeaderResponse",
      "description": "Bitcoin header response.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert from the internal representation (`BtcHeaderInfo`), and to the Babylon extended representation\n\nAdapted from `BtcHeaderInfo`.",
      "type": "object",
      "required": [
        "cum_work",
        "hash",
        "header",
        "height"
      ],
      "properties": {
        "cum_work": {
          "description": "The cumulative total work of this block and all of its ancestors.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint256"
            }
          ]
        },
        "hash": {
          "description": "`hash` is the hash of the BTC header. Encoded as a (byte-reversed) hex string.",
          "type": "string"
        },
        "header": {
          "description": "The Bitcoin header.",
          "allOf": [
            {
              "$ref": "#/definitions/BtcHeader"
            }
          ]
        },
        "height": {
          "description": "The height of the block in the BTC blockchain.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "BtcHeader": {
          "description": "Bitcoin header.\n\nContains all the block's information except the actual transactions, but including a root of a [merkle tree] committing to all transactions in the block.\n\nThis struct is for use in RPC requests and responses. It has convenience trait impls to convert to the internal representation (`BlockHeader`), and to the Babylon extended representation (`BtcHeaderInfo`). Adapted from `BlockHeader`.",
          "type": "object",
          "required": [
            "bits",
            "merkle_root",
            "nonce",
            "prev_blockhash",
            "time",
            "version"
          ],
          "properties": {
            "bits": {
              "description": "The target value below which the blockhash must lie, encoded as a a float (with well-defined rounding, of course).",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "merkle_root": {
              "description": "The root hash of the merkle tree of transactions in the block. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "nonce": {
              "description": "The nonce, selected to obtain a low enough blockhash.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "prev_blockhash": {
              "description": "Reference to the previous block in the chain. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "time": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "version": {
              "description": "Originally protocol version, but repurposed for soft-fork signaling.\n\n### Relevant BIPs\n\n* [BIP9 - Version bits with timeout and delay](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki) (current usage) * [BIP34 - Block v2, Height in Coinbase](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    },
    "btc_header": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BtcHeaderResponse",
      "description": "Bitcoin header response.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert from the internal representation (`BtcHeaderInfo`), and to the Babylon extended representation\n\nAdapted from `BtcHeaderInfo`.",
      "type": "object",
      "required": [
        "cum_work",
        "hash",
        "header",
        "height"
      ],
      "properties": {
        "cum_work": {
          "description": "The cumulative total work of this block and all of its ancestors.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint256"
            }
          ]
        },
        "hash": {
          "description": "`hash` is the hash of the BTC header. Encoded as a (byte-reversed) hex string.",
          "type": "string"
        },
        "header": {
          "description": "The Bitcoin header.",
          "allOf": [
            {
              "$ref": "#/definitions/BtcHeader"
            }
          ]
        },
        "height": {
          "description": "The height of the block in the BTC blockchain.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "BtcHeader": {
          "description": "Bitcoin header.\n\nContains all the block's information except the actual transactions, but including a root of a [merkle tree] committing to all transactions in the block.\n\nThis struct is for use in RPC requests and responses. It has convenience trait impls to convert to the internal representation (`BlockHeader`), and to the Babylon extended representation (`BtcHeaderInfo`). Adapted from `BlockHeader`.",
          "type": "object",
          "required": [
            "bits",
            "merkle_root",
            "nonce",
            "prev_blockhash",
            "time",
            "version"
          ],
          "properties": {
            "bits": {
              "description": "The target value below which the blockhash must lie, encoded as a a float (with well-defined rounding, of course).",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "merkle_root": {
              "description": "The root hash of the merkle tree of transactions in the block. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "nonce": {
              "description": "The nonce, selected to obtain a low enough blockhash.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "prev_blockhash": {
              "description": "Reference to the previous block in the chain. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "time": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "version": {
              "description": "Originally protocol version, but repurposed for soft-fork signaling.\n\n### Relevant BIPs\n\n* [BIP9 - Version bits with timeout and delay](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki) (current usage) * [BIP34 - Block v2, Height in Coinbase](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    },
    "btc_header_by_hash": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BtcHeaderResponse",
      "description": "Bitcoin header response.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert from the internal representation (`BtcHeaderInfo`), and to the Babylon extended representation\n\nAdapted from `BtcHeaderInfo`.",
      "type": "object",
      "required": [
        "cum_work",
        "hash",
        "header",
        "height"
      ],
      "properties": {
        "cum_work": {
          "description": "The cumulative total work of this block and all of its ancestors.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint256"
            }
          ]
        },
        "hash": {
          "description": "`hash` is the hash of the BTC header. Encoded as a (byte-reversed) hex string.",
          "type": "string"
        },
        "header": {
          "description": "The Bitcoin header.",
          "allOf": [
            {
              "$ref": "#/definitions/BtcHeader"
            }
          ]
        },
        "height": {
          "description": "The height of the block in the BTC blockchain.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "BtcHeader": {
          "description": "Bitcoin header.\n\nContains all the block's information except the actual transactions, but including a root of a [merkle tree] committing to all transactions in the block.\n\nThis struct is for use in RPC requests and responses. It has convenience trait impls to convert to the internal representation (`BlockHeader`), and to the Babylon extended representation (`BtcHeaderInfo`). Adapted from `BlockHeader`.",
          "type": "object",
          "required": [
            "bits",
            "merkle_root",
            "nonce",
            "prev_blockhash",
            "time",
            "version"
          ],
          "properties": {
            "bits": {
              "description": "The target value below which the blockhash must lie, encoded as a a float (with well-defined rounding, of course).",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "merkle_root": {
              "description": "The root hash of the merkle tree of transactions in the block. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "nonce": {
              "description": "The nonce, selected to obtain a low enough blockhash.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "prev_blockhash": {
              "description": "Reference to the previous block in the chain. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "time": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "version": {
              "description": "Originally protocol version, but repurposed for soft-fork signaling.\n\n### Relevant BIPs\n\n* [BIP9 - Version bits with timeout and delay](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki) (current usage) * [BIP34 - Block v2, Height in Coinbase](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    },
    "btc_headers": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BtcHeadersResponse",
      "description": "Bitcoin header responses.\n\nVector of `BtcHeaderResponse`.",
      "type": "object",
      "required": [
        "headers"
      ],
      "properties": {
        "headers": {
          "description": "The Bitcoin headers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BtcHeaderResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "BtcHeader": {
          "description": "Bitcoin header.\n\nContains all the block's information except the actual transactions, but including a root of a [merkle tree] committing to all transactions in the block.\n\nThis struct is for use in RPC requests and responses. It has convenience trait impls to convert to the internal representation (`BlockHeader`), and to the Babylon extended representation (`BtcHeaderInfo`). Adapted from `BlockHeader`.",
          "type": "object",
          "required": [
            "bits",
            "merkle_root",
            "nonce",
            "prev_blockhash",
            "time",
            "version"
          ],
          "properties": {
            "bits": {
              "description": "The target value below which the blockhash must lie, encoded as a a float (with well-defined rounding, of course).",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "merkle_root": {
              "description": "The root hash of the merkle tree of transactions in the block. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "nonce": {
              "description": "The nonce, selected to obtain a low enough blockhash.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "prev_blockhash": {
              "description": "Reference to the previous block in the chain. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "time": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "version": {
              "description": "Originally protocol version, but repurposed for soft-fork signaling.\n\n### Relevant BIPs\n\n* [BIP9 - Version bits with timeout and delay](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki) (current usage) * [BIP34 - Block v2, Height in Coinbase](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "BtcHeaderResponse": {
          "description": "Bitcoin header response.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert from the internal representation (`BtcHeaderInfo`), and to the Babylon extended representation\n\nAdapted from `BtcHeaderInfo`.",
          "type": "object",
          "required": [
            "cum_work",
            "hash",
            "header",
            "height"
          ],
          "properties": {
            "cum_work": {
              "description": "The cumulative total work of this block and all of its ancestors.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint256"
                }
              ]
            },
            "hash": {
              "description": "`hash` is the hash of the BTC header. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "header": {
              "description": "The Bitcoin header.",
              "allOf": [
                {
                  "$ref": "#/definitions/BtcHeader"
                }
              ]
            },
            "height": {
              "description": "The height of the block in the BTC blockchain.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    },
    "btc_tip_header": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BtcHeaderResponse",
      "description": "Bitcoin header response.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert from the internal representation (`BtcHeaderInfo`), and to the Babylon extended representation\n\nAdapted from `BtcHeaderInfo`.",
      "type": "object",
      "required": [
        "cum_work",
        "hash",
        "header",
        "height"
      ],
      "properties": {
        "cum_work": {
          "description": "The cumulative total work of this block and all of its ancestors.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint256"
            }
          ]
        },
        "hash": {
          "description": "`hash` is the hash of the BTC header. Encoded as a (byte-reversed) hex string.",
          "type": "string"
        },
        "header": {
          "description": "The Bitcoin header.",
          "allOf": [
            {
              "$ref": "#/definitions/BtcHeader"
            }
          ]
        },
        "height": {
          "description": "The height of the block in the BTC blockchain.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "BtcHeader": {
          "description": "Bitcoin header.\n\nContains all the block's information except the actual transactions, but including a root of a [merkle tree] committing to all transactions in the block.\n\nThis struct is for use in RPC requests and responses. It has convenience trait impls to convert to the internal representation (`BlockHeader`), and to the Babylon extended representation (`BtcHeaderInfo`). Adapted from `BlockHeader`.",
          "type": "object",
          "required": [
            "bits",
            "merkle_root",
            "nonce",
            "prev_blockhash",
            "time",
            "version"
          ],
          "properties": {
            "bits": {
              "description": "The target value below which the blockhash must lie, encoded as a a float (with well-defined rounding, of course).",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "merkle_root": {
              "description": "The root hash of the merkle tree of transactions in the block. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "nonce": {
              "description": "The nonce, selected to obtain a low enough blockhash.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "prev_blockhash": {
              "description": "Reference to the previous block in the chain. Encoded as a (byte-reversed) hex string.",
              "type": "string"
            },
            "time": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "version": {
              "description": "Originally protocol version, but repurposed for soft-fork signaling.\n\n### Relevant BIPs\n\n* [BIP9 - Version bits with timeout and delay](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki) (current usage) * [BIP34 - Block v2, Height in Coinbase](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "babylon_tag",
        "btc_confirmation_depth",
        "checkpoint_finalization_timeout",
        "network",
        "notify_cosmos_zone"
      ],
      "properties": {
        "babylon_tag": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "btc_confirmation_depth": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "btc_finality": {
          "description": "If set, this stores a BTC finality contract used for BTC finality on the Consumer",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "btc_staking": {
          "description": "If set, this stores a BTC staking contract used for BTC re-staking",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "checkpoint_finalization_timeout": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "consumer_description": {
          "description": "Consumer description",
          "type": [
            "string",
            "null"
          ]
        },
        "consumer_name": {
          "description": "Consumer name",
          "type": [
            "string",
            "null"
          ]
        },
        "network": {
          "$ref": "#/definitions/Network"
        },
        "notify_cosmos_zone": {
          "description": "notify_cosmos_zone indicates whether to send Cosmos zone messages notifying BTC-finalised headers. NOTE: if set to true, then the Cosmos zone needs to integrate the corresponding message handler as well",
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Network": {
          "type": "string",
          "enum": [
            "mainnet",
            "testnet",
            "signet",
            "regtest"
          ]
        }
      }
    },
    "cz_header": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CzHeaderResponse",
      "description": "CzHeaderResponse is the metadata of a CZ header.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert from the internal representation (`IndexedHeader`).\n\nAdapted from `IndexedHeader`.",
      "type": "object",
      "required": [
        "babylon_epoch",
        "babylon_header_hash",
        "babylon_header_height",
        "babylon_tx_hash",
        "chain_id",
        "hash",
        "height"
      ],
      "properties": {
        "babylon_epoch": {
          "description": "epoch is the epoch number of this header in the Babylon ledger",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "babylon_header_hash": {
          "description": "babylon_header_hash is the hash of the babylon block that includes this CZ header Hex-encoded string of 32 bytes",
          "type": "string"
        },
        "babylon_header_height": {
          "description": "babylon_header_height is the height of the babylon block that includes this CZ header",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "babylon_tx_hash": {
          "description": "babylon_tx_hash is the hash of the tx that includes this header. (babylon_block_height, babylon_tx_hash) jointly provides the position of the header in the Babylon ledger. Hex-encoded string of 32 bytes",
          "type": "string"
        },
        "chain_id": {
          "description": "chain_id is the unique ID of the chain",
          "type": "string"
        },
        "hash": {
          "description": "hash is the hash of this header. Hex-encoded string of 32 bytes",
          "type": "string"
        },
        "height": {
          "description": "height is the height of this header in the CZ ledger. (hash, height) jointly provides the position of the header on CZ ledger",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "time": {
          "description": "time is the timestamp of this header in the CZ ledger. It is needed for the CZ to unbond all mature validators/delegations before this timestamp when this header is BTC-finalised",
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "cz_last_header": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CzHeaderResponse",
      "description": "CzHeaderResponse is the metadata of a CZ header.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert from the internal representation (`IndexedHeader`).\n\nAdapted from `IndexedHeader`.",
      "type": "object",
      "required": [
        "babylon_epoch",
        "babylon_header_hash",
        "babylon_header_height",
        "babylon_tx_hash",
        "chain_id",
        "hash",
        "height"
      ],
      "properties": {
        "babylon_epoch": {
          "description": "epoch is the epoch number of this header in the Babylon ledger",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "babylon_header_hash": {
          "description": "babylon_header_hash is the hash of the babylon block that includes this CZ header Hex-encoded string of 32 bytes",
          "type": "string"
        },
        "babylon_header_height": {
          "description": "babylon_header_height is the height of the babylon block that includes this CZ header",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "babylon_tx_hash": {
          "description": "babylon_tx_hash is the hash of the tx that includes this header. (babylon_block_height, babylon_tx_hash) jointly provides the position of the header in the Babylon ledger. Hex-encoded string of 32 bytes",
          "type": "string"
        },
        "chain_id": {
          "description": "chain_id is the unique ID of the chain",
          "type": "string"
        },
        "hash": {
          "description": "hash is the hash of this header. Hex-encoded string of 32 bytes",
          "type": "string"
        },
        "height": {
          "description": "height is the height of this header in the CZ ledger. (hash, height) jointly provides the position of the header on CZ ledger",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "time": {
          "description": "time is the timestamp of this header in the CZ ledger. It is needed for the CZ to unbond all mature validators/delegations before this timestamp when this header is BTC-finalised",
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
