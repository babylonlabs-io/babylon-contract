{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "BtcHeaderResponse",
  "description": "Bitcoin header response.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert from the internal representation (`BtcHeaderInfo`), and to the Babylon extended representation\n\nAdapted from `BtcHeaderInfo`.",
  "type": "object",
  "required": [
    "cum_work",
    "hash",
    "header",
    "height"
  ],
  "properties": {
    "cum_work": {
      "description": "The cumulative total work of this block and all of its ancestors.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint256"
        }
      ]
    },
    "hash": {
      "description": "`hash` is the hash of the BTC header. Encoded as a (byte-reversed) hex string.",
      "type": "string"
    },
    "header": {
      "description": "The Bitcoin header.",
      "allOf": [
        {
          "$ref": "#/definitions/BtcHeader"
        }
      ]
    },
    "height": {
      "description": "The height of the block in the BTC blockchain.",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    }
  },
  "additionalProperties": false,
  "definitions": {
    "BtcHeader": {
      "description": "Bitcoin header.\n\nContains all the block's information except the actual transactions, but including a root of a [merkle tree] committing to all transactions in the block.\n\nThis struct is for use in RPC requests and responses. It has convenience trait impls to convert to the internal representation (`BlockHeader`), and to the Babylon extended representation (`BtcHeaderInfo`). Adapted from `BlockHeader`.",
      "type": "object",
      "required": [
        "bits",
        "merkle_root",
        "nonce",
        "prev_blockhash",
        "time",
        "version"
      ],
      "properties": {
        "bits": {
          "description": "The target value below which the blockhash must lie, encoded as a a float (with well-defined rounding, of course).",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "merkle_root": {
          "description": "The root hash of the merkle tree of transactions in the block. Encoded as a (byte-reversed) hex string.",
          "type": "string"
        },
        "nonce": {
          "description": "The nonce, selected to obtain a low enough blockhash.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "prev_blockhash": {
          "description": "Reference to the previous block in the chain. Encoded as a (byte-reversed) hex string.",
          "type": "string"
        },
        "time": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "version": {
          "description": "Originally protocol version, but repurposed for soft-fork signaling.\n\n### Relevant BIPs\n\n* [BIP9 - Version bits with timeout and delay](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki) (current usage) * [BIP34 - Block v2, Height in Coinbase](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    }
  }
}
