{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ConsumerHeaderResponse",
  "description": "ConsumerHeaderResponse is the metadata of a Consumer header.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert from the internal representation (`IndexedHeader`).\n\nAdapted from `IndexedHeader`.",
  "type": "object",
  "required": [
    "babylon_epoch",
    "babylon_header_hash",
    "babylon_header_height",
    "babylon_tx_hash",
    "consumer_id",
    "hash",
    "height"
  ],
  "properties": {
    "babylon_epoch": {
      "description": "epoch is the epoch number of this header in the Babylon ledger",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "babylon_header_hash": {
      "description": "babylon_header_hash is the hash of the babylon block that includes this Consumer header. Hex-encoded string of 32 bytes",
      "type": "string"
    },
    "babylon_header_height": {
      "description": "babylon_header_height is the height of the babylon block that includes this Consumer header",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "babylon_tx_hash": {
      "description": "babylon_tx_hash is the hash of the tx that includes this header. (babylon_block_height, babylon_tx_hash) jointly provides the position of the header in the Babylon ledger. Hex-encoded string of 32 bytes",
      "type": "string"
    },
    "consumer_id": {
      "description": "consumer_id is the unique ID of the consumer",
      "type": "string"
    },
    "hash": {
      "description": "hash is the hash of this header. Hex-encoded string of 32 bytes",
      "type": "string"
    },
    "height": {
      "description": "height is the height of this header in the Consumer's ledger. (hash, height) jointly provides the position of the header on the Consumer ledger",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "time": {
      "description": "time is the timestamp of this header in the Consumer's ledger. It's necessary for the Consumer to unbond all mature validators/delegations before this timestamp when this header is BTC-finalised",
      "anyOf": [
        {
          "$ref": "#/definitions/Timestamp"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
