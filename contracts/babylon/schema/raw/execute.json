{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "btc_headers"
      ],
      "properties": {
        "btc_headers": {
          "type": "object",
          "required": [
            "headers"
          ],
          "properties": {
            "headers": {
              "description": "`headers` is a list of BTC headers. Typically: - A given delta of headers a user wants to add to the tip or fork of the BTC chain.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/BtcHeader"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "`slashing` is a slashing event from the BTC staking contract.\n\nThis will be forwarded over IBC to the Babylon side for propagation to other Consumers, and Babylon itself",
      "type": "object",
      "required": [
        "slashing"
      ],
      "properties": {
        "slashing": {
          "type": "object",
          "required": [
            "evidence"
          ],
          "properties": {
            "evidence": {
              "$ref": "#/definitions/Evidence"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "`SendRewards` is a message sent by the finality contract, to send rewards to Babylon",
      "type": "object",
      "required": [
        "send_rewards"
      ],
      "properties": {
        "send_rewards": {
          "type": "object",
          "required": [
            "fp_distribution"
          ],
          "properties": {
            "fp_distribution": {
              "description": "`fp_distribution` is the list of finality providers and their rewards",
              "type": "array",
              "items": {
                "$ref": "#/definitions/RewardsDistribution"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "BtcHeader": {
      "description": "Bitcoin header.\n\nContains all the block's information except the actual transactions, but including a root of a [merkle tree] committing to all transactions in the block.\n\nThis struct is for use in RPC requests and responses. It has convenience trait impls to convert to the internal representation (`BlockHeader`), and to the Babylon extended representation (`BtcHeaderInfo`). Adapted from `BlockHeader`.",
      "type": "object",
      "required": [
        "bits",
        "merkle_root",
        "nonce",
        "prev_blockhash",
        "time",
        "version"
      ],
      "properties": {
        "bits": {
          "description": "The target value below which the blockhash must lie, encoded as a a float (with well-defined rounding, of course).",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "merkle_root": {
          "description": "The root hash of the merkle tree of transactions in the block. Encoded as a (byte-reversed) hex string.",
          "type": "string"
        },
        "nonce": {
          "description": "The nonce, selected to obtain a low enough blockhash.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "prev_blockhash": {
          "description": "Reference to the previous block in the chain. Encoded as a (byte-reversed) hex string.",
          "type": "string"
        },
        "time": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "version": {
          "description": "Originally protocol version, but repurposed for soft-fork signaling.\n\n### Relevant BIPs\n\n* [BIP9 - Version bits with timeout and delay](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki) (current usage) * [BIP34 - Block v2, Height in Coinbase](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "Evidence": {
      "description": "Evidence is the evidence that a finality provider has signed finality signatures with correct public randomness on two conflicting Babylon headers",
      "type": "object",
      "required": [
        "block_height",
        "canonical_app_hash",
        "canonical_finality_sig",
        "fork_app_hash",
        "fork_finality_sig",
        "fp_btc_pk",
        "pub_rand"
      ],
      "properties": {
        "block_height": {
          "description": "`block_height` is the height of the conflicting blocks",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "canonical_app_hash": {
          "description": "`canonical_app_hash` is the AppHash of the canonical block",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "canonical_finality_sig": {
          "description": "`canonical_finality_sig` is the finality signature to the canonical block, where finality signature is an EOTS signature, i.e., the `s` in a Schnorr signature `(r, s)`. `r` is the public randomness already committed by the finality provider. Deserializes to `SchnorrEOTSSig`",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "fork_app_hash": {
          "description": "`fork_app_hash` is the AppHash of the fork block",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "fork_finality_sig": {
          "description": "`fork_finality_sig` is the finality signature to the fork block, where finality signature is an EOTS signature. Deserializes to `SchnorrEOTSSig`",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "fp_btc_pk": {
          "description": "`fp_btc_pk` is the BTC PK of the finality provider that casts this vote",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "pub_rand": {
          "description": "`pub_rand is` the public randomness the finality provider has committed to. Deserializes to `SchnorrPubRand`",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        }
      },
      "additionalProperties": false
    },
    "RewardsDistribution": {
      "type": "object",
      "required": [
        "fp_pubkey_hex",
        "reward"
      ],
      "properties": {
        "fp_pubkey_hex": {
          "type": "string"
        },
        "reward": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
