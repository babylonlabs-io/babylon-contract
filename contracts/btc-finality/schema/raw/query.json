{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "`Config` returns the current configuration of the btc-staking contract",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "`Params` returns the current Consumer-specific parameters of the btc-staking contract",
      "type": "object",
      "required": [
        "params"
      ],
      "properties": {
        "params": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "`Admin` returns the current admin of the contract",
      "type": "object",
      "required": [
        "admin"
      ],
      "properties": {
        "admin": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "`FinalityProvider` returns the finality provider by its BTC public key, in hex format",
      "type": "object",
      "required": [
        "finality_provider"
      ],
      "properties": {
        "finality_provider": {
          "type": "object",
          "required": [
            "btc_pk_hex"
          ],
          "properties": {
            "btc_pk_hex": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "`FinalityProviders` returns the list of registered finality providers\n\n`start_after` is the BTC public key of the FP to start after, or `None` to start from the beginning",
      "type": "object",
      "required": [
        "finality_providers"
      ],
      "properties": {
        "finality_providers": {
          "type": "object",
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "`Delegation` returns delegation information by its staking tx hash, in hex format",
      "type": "object",
      "required": [
        "delegation"
      ],
      "properties": {
        "delegation": {
          "type": "object",
          "required": [
            "staking_tx_hash_hex"
          ],
          "properties": {
            "staking_tx_hash_hex": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "`Delegations` return the list of delegations\n\n`start_after` is the staking tx hash (in hex format) of the delegation to start after, or `None` to start from the beginning. `limit` is the maximum number of delegations to return. `active` is an optional filter to return only active delegations",
      "type": "object",
      "required": [
        "delegations"
      ],
      "properties": {
        "delegations": {
          "type": "object",
          "properties": {
            "active": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "`DelegationsByFP` returns the list of staking tx hashes (in hex format) corresponding to delegations, for a given finality provider.\n\n`btc_pk_hex` is the BTC public key of the finality provider, in hex format. The hashes are returned in hex format",
      "type": "object",
      "required": [
        "delegations_by_f_p"
      ],
      "properties": {
        "delegations_by_f_p": {
          "type": "object",
          "required": [
            "btc_pk_hex"
          ],
          "properties": {
            "btc_pk_hex": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "`FinalityProviderInfo` returns the finality provider information by its BTC public key, in hex format The information includes the aggregated power of the finality provider.\n\n`height` is the optional block height at which the power is being aggregated. If `height` is not provided, the latest aggregated power is returned",
      "type": "object",
      "required": [
        "finality_provider_info"
      ],
      "properties": {
        "finality_provider_info": {
          "type": "object",
          "required": [
            "btc_pk_hex"
          ],
          "properties": {
            "btc_pk_hex": {
              "type": "string"
            },
            "height": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "`FinalityProvidersByPower` returns the list of finality provider infos sorted by their aggregated power, in descending order.\n\n`start_after` is the BTC public key of the FP to start after, or `None` to start from the top",
      "type": "object",
      "required": [
        "finality_providers_by_power"
      ],
      "properties": {
        "finality_providers_by_power": {
          "type": "object",
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "anyOf": [
                {
                  "$ref": "#/definitions/FinalityProviderInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "`PendingRewards` returns the pending rewards for a user on a finality provider. The rewards are returned in the form of a Coin",
      "type": "object",
      "required": [
        "pending_rewards"
      ],
      "properties": {
        "pending_rewards": {
          "type": "object",
          "required": [
            "fp_pubkey_hex",
            "user"
          ],
          "properties": {
            "fp_pubkey_hex": {
              "type": "string"
            },
            "user": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "`AllPendingRewards` returns the pending rewards for a user on all finality providers.",
      "type": "object",
      "required": [
        "all_pending_rewards"
      ],
      "properties": {
        "all_pending_rewards": {
          "type": "object",
          "required": [
            "user"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "anyOf": [
                {
                  "$ref": "#/definitions/PendingRewards"
                },
                {
                  "type": "null"
                }
              ]
            },
            "user": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "`ActivatedHeight` returns the height at which the contract gets its first delegation, if any",
      "type": "object",
      "required": [
        "activated_height"
      ],
      "properties": {
        "activated_height": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "FinalityProviderInfo": {
      "type": "object",
      "required": [
        "btc_pk_hex",
        "power"
      ],
      "properties": {
        "btc_pk_hex": {
          "description": "`btc_pk_hex` is the Bitcoin secp256k1 PK of this finality provider. The PK follows encoding in BIP-340 spec in hex format",
          "type": "string"
        },
        "power": {
          "description": "`power` is the aggregated power of this finality provider. The power is calculated based on the amount of BTC delegated to this finality provider",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "PendingRewards": {
      "type": "object",
      "required": [
        "fp_pubkey_hex",
        "rewards",
        "staking_tx_hash"
      ],
      "properties": {
        "fp_pubkey_hex": {
          "type": "string"
        },
        "rewards": {
          "$ref": "#/definitions/Coin"
        },
        "staking_tx_hash": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
