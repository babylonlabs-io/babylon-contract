{
  "contract_name": "btc-staking",
  "contract_version": "0.10.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "properties": {
      "admin": {
        "type": [
          "string",
          "null"
        ]
      },
      "params": {
        "anyOf": [
          {
            "$ref": "#/definitions/Params"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Network": {
        "type": "string",
        "enum": [
          "mainnet",
          "testnet",
          "signet",
          "regtest"
        ]
      },
      "Params": {
        "description": "Params define Consumer-selectable BTC staking parameters",
        "type": "object",
        "required": [
          "btc_network",
          "covenant_pks",
          "covenant_quorum",
          "min_slashing_tx_fee_sat",
          "slashing_address",
          "slashing_rate"
        ],
        "properties": {
          "btc_network": {
            "$ref": "#/definitions/Network"
          },
          "covenant_pks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "covenant_quorum": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "min_slashing_tx_fee_sat": {
            "description": "`min_slashing_tx_fee_sat` is the minimum amount of tx fee (quantified in Satoshi) needed for the pre-signed slashing tx",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "slashing_address": {
            "description": "`slashing_address` is the address that the slashed BTC goes to. The address is in string format on Bitcoin.",
            "type": "string"
          },
          "slashing_rate": {
            "description": "`slashing_rate` determines the portion of the staked amount to be slashed, expressed as a decimal (e.g. 0.5 for 50%).",
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "btc_staking execution handlers",
    "oneOf": [
      {
        "description": "Change the admin",
        "type": "object",
        "required": [
          "update_admin"
        ],
        "properties": {
          "update_admin": {
            "type": "object",
            "properties": {
              "admin": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "BTC Staking operations",
        "type": "object",
        "required": [
          "btc_staking"
        ],
        "properties": {
          "btc_staking": {
            "type": "object",
            "required": [
              "active_del",
              "new_fp",
              "slashed_del",
              "unbonded_del"
            ],
            "properties": {
              "active_del": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ActiveBtcDelegation"
                }
              },
              "new_fp": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/NewFinalityProvider"
                }
              },
              "slashed_del": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SlashedBtcDelegation"
                }
              },
              "unbonded_del": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UnbondedBtcDelegation"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Slash finality provider staking power. Used by the babylon-contract only. The Babylon contract will call this message to set the finality provider's staking power to zero when the finality provider is found to be malicious by the finality contract.",
        "type": "object",
        "required": [
          "slash"
        ],
        "properties": {
          "slash": {
            "type": "object",
            "required": [
              "fp_btc_pk_hex"
            ],
            "properties": {
              "fp_btc_pk_hex": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "ActiveBtcDelegation": {
        "description": "ActiveBTCDelegation is a message sent when a BTC delegation newly receives covenant signatures and thus becomes active",
        "type": "object",
        "required": [
          "btc_pk_hex",
          "covenant_sigs",
          "delegator_slashing_sig",
          "end_height",
          "fp_btc_pk_list",
          "params_version",
          "slashing_tx",
          "staker_addr",
          "staking_output_idx",
          "staking_tx",
          "start_height",
          "total_sat",
          "unbonding_time",
          "undelegation_info"
        ],
        "properties": {
          "btc_pk_hex": {
            "description": "btc_pk_hex is the Bitcoin secp256k1 PK of the BTC delegator. The PK follows encoding in BIP-340 spec in hex format",
            "type": "string"
          },
          "covenant_sigs": {
            "description": "covenant_sigs is a list of adaptor signatures on the slashing tx by each covenant member. It will be a part of the witness for the staking tx output.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CovenantAdaptorSignatures"
            }
          },
          "delegator_slashing_sig": {
            "description": "delegator_slashing_sig is the signature on the slashing tx by the delegator (i.e. SK corresponding to btc_pk) as string hex. It will be a part of the witness for the staking tx output.",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "end_height": {
            "description": "end_height is the end height of the BTC delegation it is the end BTC height of the time-lock - w",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "fp_btc_pk_list": {
            "description": "fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that this BTC delegation delegates to",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "params_version": {
            "description": "params version used to validate the delegation",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "slashing_tx": {
            "description": "slashing_tx is the slashing tx",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "staker_addr": {
            "description": "staker_addr is the address to receive rewards from BTC delegation",
            "type": "string"
          },
          "staking_output_idx": {
            "description": "staking_output_idx is the index of the staking output in the staking tx",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "staking_tx": {
            "description": "staking_tx is the staking tx",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "start_height": {
            "description": "start_height is the start BTC height of the BTC delegation. It is the start BTC height of the time-lock",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "total_sat": {
            "description": "total_sat is the total BTC stakes in this delegation, quantified in satoshi",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "unbonding_time": {
            "description": "unbonding_time is used in unbonding output time-lock path and in slashing transactions change outputs",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "undelegation_info": {
            "description": "undelegation_info is the undelegation info of this delegation.",
            "allOf": [
              {
                "$ref": "#/definitions/BtcUndelegationInfo"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "BtcUndelegationInfo": {
        "description": "BTCUndelegationInfo provides all necessary info about the undelegation",
        "type": "object",
        "required": [
          "covenant_slashing_sigs",
          "covenant_unbonding_sig_list",
          "delegator_slashing_sig",
          "delegator_unbonding_sig",
          "slashing_tx",
          "unbonding_tx"
        ],
        "properties": {
          "covenant_slashing_sigs": {
            "description": "covenant_slashing_sigs is a list of adaptor signatures on the unbonding slashing tx by each covenant member It will be a part of the witness for the staking tx output.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CovenantAdaptorSignatures"
            }
          },
          "covenant_unbonding_sig_list": {
            "description": "covenant_unbonding_sig_list is the list of signatures on the unbonding tx by covenant members",
            "type": "array",
            "items": {
              "$ref": "#/definitions/SignatureInfo"
            }
          },
          "delegator_slashing_sig": {
            "description": "delegator_slashing_sig is the signature on the slashing tx by the delegator (i.e. SK corresponding to btc_pk). It will be a part of the witness for the unbonding tx output.",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "delegator_unbonding_sig": {
            "description": "delegator_unbonding_sig is the signature on the unbonding tx by the delegator (i.e. SK corresponding to btc_pk). It effectively proves that the delegator wants to unbond and thus Babylon will consider this BTC delegation unbonded. Delegator's BTC on Bitcoin will be unbonded after time-lock.",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "slashing_tx": {
            "description": "slashing_tx is the unbonding slashing tx",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "unbonding_tx": {
            "description": "unbonding_tx is the transaction which will transfer the funds from staking output to unbonding output. Unbonding output will usually have lower timelock than staking output.",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "CovenantAdaptorSignatures": {
        "description": "CovenantAdaptorSignatures is a list adaptor signatures signed by the covenant with different finality provider's public keys as encryption keys",
        "type": "object",
        "required": [
          "adaptor_sigs",
          "cov_pk"
        ],
        "properties": {
          "adaptor_sigs": {
            "description": "adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Binary"
            }
          },
          "cov_pk": {
            "description": "cov_pk is the public key of the covenant emulator, used as the public key of the adaptor signature",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "FinalityProviderDescription": {
        "type": "object",
        "required": [
          "details",
          "identity",
          "moniker",
          "security_contact",
          "website"
        ],
        "properties": {
          "details": {
            "description": "details is the details of the finality provider",
            "type": "string"
          },
          "identity": {
            "description": "identity is the identity of the finality provider",
            "type": "string"
          },
          "moniker": {
            "description": "moniker is the name of the finality provider",
            "type": "string"
          },
          "security_contact": {
            "description": "security_contact is the security contact of the finality provider",
            "type": "string"
          },
          "website": {
            "description": "website is the website of the finality provider",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NewFinalityProvider": {
        "type": "object",
        "required": [
          "addr",
          "btc_pk_hex",
          "commission",
          "consumer_id"
        ],
        "properties": {
          "addr": {
            "description": "addr is the bech32 address identifier of the finality provider",
            "type": "string"
          },
          "btc_pk_hex": {
            "description": "btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider the PK follows encoding in BIP-340 spec in hex format",
            "type": "string"
          },
          "commission": {
            "description": "commission defines the commission rate of the finality provider.",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          },
          "consumer_id": {
            "description": "consumer_id is the ID of the consumer that the finality provider is operating on.",
            "type": "string"
          },
          "description": {
            "description": "description defines the description terms for the finality provider",
            "anyOf": [
              {
                "$ref": "#/definitions/FinalityProviderDescription"
              },
              {
                "type": "null"
              }
            ]
          },
          "pop": {
            "description": "pop is the proof of possession of the babylon_pk and btc_pk",
            "anyOf": [
              {
                "$ref": "#/definitions/ProofOfPossessionBtc"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ProofOfPossessionBtc": {
        "description": "ProofOfPossessionBtc is the proof of possession that a Babylon secp256k1 secret key and a Bitcoin secp256k1 secret key are held by the same person",
        "type": "object",
        "required": [
          "btc_sig",
          "btc_sig_type"
        ],
        "properties": {
          "btc_sig": {
            "description": "btc_sig is the signature generated via sign(sk_btc, babylon_sig) the signature follows encoding in either BIP-340 spec or BIP-322 spec",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "btc_sig_type": {
            "description": "btc_sig_type indicates the type of btc_sig in the pop",
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SignatureInfo": {
        "description": "SignatureInfo is a BIP-340 signature together with its signer's BIP-340 PK",
        "type": "object",
        "required": [
          "pk",
          "sig"
        ],
        "properties": {
          "pk": {
            "$ref": "#/definitions/Binary"
          },
          "sig": {
            "$ref": "#/definitions/Binary"
          }
        },
        "additionalProperties": false
      },
      "SlashedBtcDelegation": {
        "description": "SlashedBTCDelegation is a packet sent from Babylon to the Consumer chain about a slashed BTC delegation re-staked to >=1 of the Consumer chain's finality providers",
        "type": "object",
        "required": [
          "recovered_fp_btc_sk",
          "staking_tx_hash"
        ],
        "properties": {
          "recovered_fp_btc_sk": {
            "description": "recovered_fp_btc_sk is the extracted BTC SK of the finality provider on this Consumer chain",
            "type": "string"
          },
          "staking_tx_hash": {
            "description": "staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UnbondedBtcDelegation": {
        "description": "UnbondedBTCDelegation is sent from Babylon to the Consumer chain upon an early unbonded BTC delegation",
        "type": "object",
        "required": [
          "staking_tx_hash",
          "unbonding_tx_sig"
        ],
        "properties": {
          "staking_tx_hash": {
            "description": "staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation",
            "type": "string"
          },
          "unbonding_tx_sig": {
            "description": "unbonding_tx_sig is the signature on the unbonding tx signed by the BTC delegator It proves that the BTC delegator wants to unbond",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "`Config` returns the current configuration of the btc-staking contract",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "`Params` returns the current Consumer-specific parameters of the btc-staking contract",
        "type": "object",
        "required": [
          "params"
        ],
        "properties": {
          "params": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "`Admin` returns the current admin of the contract",
        "type": "object",
        "required": [
          "admin"
        ],
        "properties": {
          "admin": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "`FinalityProvider` returns the finality provider by its BTC public key, in hex format",
        "type": "object",
        "required": [
          "finality_provider"
        ],
        "properties": {
          "finality_provider": {
            "type": "object",
            "required": [
              "btc_pk_hex"
            ],
            "properties": {
              "btc_pk_hex": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "`FinalityProviders` returns the list of registered finality providers\n\n`start_after` is the BTC public key of the FP to start after, or `None` to start from the beginning",
        "type": "object",
        "required": [
          "finality_providers"
        ],
        "properties": {
          "finality_providers": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "`Delegation` returns delegation information by its staking tx hash, in hex format",
        "type": "object",
        "required": [
          "delegation"
        ],
        "properties": {
          "delegation": {
            "type": "object",
            "required": [
              "staking_tx_hash_hex"
            ],
            "properties": {
              "staking_tx_hash_hex": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "`Delegations` return the list of delegations\n\n`start_after` is the staking tx hash (in hex format) of the delegation to start after, or `None` to start from the beginning. `limit` is the maximum number of delegations to return. `active` is an optional filter to return only active delegations",
        "type": "object",
        "required": [
          "delegations"
        ],
        "properties": {
          "delegations": {
            "type": "object",
            "properties": {
              "active": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "`DelegationsByFP` returns the list of staking tx hashes (in hex format) corresponding to delegations, for a given finality provider.\n\n`btc_pk_hex` is the BTC public key of the finality provider, in hex format. The hashes are returned in hex format",
        "type": "object",
        "required": [
          "delegations_by_f_p"
        ],
        "properties": {
          "delegations_by_f_p": {
            "type": "object",
            "required": [
              "btc_pk_hex"
            ],
            "properties": {
              "btc_pk_hex": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "`FinalityProviderInfo` returns the finality provider information by its BTC public key, in hex format The information includes the aggregated power of the finality provider.\n\n`height` is the optional block height at which the power is being aggregated. If `height` is not provided, the latest aggregated power is returned",
        "type": "object",
        "required": [
          "finality_provider_info"
        ],
        "properties": {
          "finality_provider_info": {
            "type": "object",
            "required": [
              "btc_pk_hex"
            ],
            "properties": {
              "btc_pk_hex": {
                "type": "string"
              },
              "height": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "`FinalityProvidersByPower` returns the list of finality provider infos sorted by their aggregated power, in descending order.\n\n`start_after` is the BTC public key of the FP to start after, or `None` to start from the top",
        "type": "object",
        "required": [
          "finality_providers_by_power"
        ],
        "properties": {
          "finality_providers_by_power": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FinalityProviderInfo"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "`ActivatedHeight` returns the height at which the contract gets its first delegation, if any",
        "type": "object",
        "required": [
          "activated_height"
        ],
        "properties": {
          "activated_height": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "FinalityProviderInfo": {
        "type": "object",
        "required": [
          "btc_pk_hex",
          "power"
        ],
        "properties": {
          "btc_pk_hex": {
            "description": "`btc_pk_hex` is the Bitcoin secp256k1 PK of this finality provider. The PK follows encoding in BIP-340 spec in hex format",
            "type": "string"
          },
          "power": {
            "description": "`power` is the aggregated power of this finality provider. The power is calculated based on the amount of BTC delegated to this finality provider",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "activated_height": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ActivatedHeightResponse",
      "type": "object",
      "required": [
        "height"
      ],
      "properties": {
        "height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AdminResponse",
      "description": "Returned from Admin.query_admin()",
      "type": "object",
      "properties": {
        "admin": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "description": "Config are Babylon-selectable BTC staking configuration",
      "type": "object",
      "required": [
        "babylon"
      ],
      "properties": {
        "babylon": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "delegation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ActiveBtcDelegation",
      "description": "ActiveBTCDelegation is a message sent when a BTC delegation newly receives covenant signatures and thus becomes active",
      "type": "object",
      "required": [
        "btc_pk_hex",
        "covenant_sigs",
        "delegator_slashing_sig",
        "end_height",
        "fp_btc_pk_list",
        "params_version",
        "slashing_tx",
        "staker_addr",
        "staking_output_idx",
        "staking_tx",
        "start_height",
        "total_sat",
        "unbonding_time",
        "undelegation_info"
      ],
      "properties": {
        "btc_pk_hex": {
          "description": "btc_pk_hex is the Bitcoin secp256k1 PK of the BTC delegator. The PK follows encoding in BIP-340 spec in hex format",
          "type": "string"
        },
        "covenant_sigs": {
          "description": "covenant_sigs is a list of adaptor signatures on the slashing tx by each covenant member. It will be a part of the witness for the staking tx output.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CovenantAdaptorSignatures"
          }
        },
        "delegator_slashing_sig": {
          "description": "delegator_slashing_sig is the signature on the slashing tx by the delegator (i.e. SK corresponding to btc_pk) as string hex. It will be a part of the witness for the staking tx output.",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "end_height": {
          "description": "end_height is the end height of the BTC delegation it is the end BTC height of the time-lock - w",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "fp_btc_pk_list": {
          "description": "fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that this BTC delegation delegates to",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "params_version": {
          "description": "params version used to validate the delegation",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "slashing_tx": {
          "description": "slashing_tx is the slashing tx",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "staker_addr": {
          "description": "staker_addr is the address to receive rewards from BTC delegation",
          "type": "string"
        },
        "staking_output_idx": {
          "description": "staking_output_idx is the index of the staking output in the staking tx",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "staking_tx": {
          "description": "staking_tx is the staking tx",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "start_height": {
          "description": "start_height is the start BTC height of the BTC delegation. It is the start BTC height of the time-lock",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "total_sat": {
          "description": "total_sat is the total BTC stakes in this delegation, quantified in satoshi",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "unbonding_time": {
          "description": "unbonding_time is used in unbonding output time-lock path and in slashing transactions change outputs",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "undelegation_info": {
          "description": "undelegation_info is the undelegation info of this delegation.",
          "allOf": [
            {
              "$ref": "#/definitions/BtcUndelegationInfo"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "BtcUndelegationInfo": {
          "description": "BTCUndelegationInfo provides all necessary info about the undelegation",
          "type": "object",
          "required": [
            "covenant_slashing_sigs",
            "covenant_unbonding_sig_list",
            "delegator_slashing_sig",
            "delegator_unbonding_sig",
            "slashing_tx",
            "unbonding_tx"
          ],
          "properties": {
            "covenant_slashing_sigs": {
              "description": "covenant_slashing_sigs is a list of adaptor signatures on the unbonding slashing tx by each covenant member It will be a part of the witness for the staking tx output.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CovenantAdaptorSignatures"
              }
            },
            "covenant_unbonding_sig_list": {
              "description": "covenant_unbonding_sig_list is the list of signatures on the unbonding tx by covenant members",
              "type": "array",
              "items": {
                "$ref": "#/definitions/SignatureInfo"
              }
            },
            "delegator_slashing_sig": {
              "description": "delegator_slashing_sig is the signature on the slashing tx by the delegator (i.e. SK corresponding to btc_pk). It will be a part of the witness for the unbonding tx output.",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "delegator_unbonding_sig": {
              "description": "delegator_unbonding_sig is the signature on the unbonding tx by the delegator (i.e. SK corresponding to btc_pk). It effectively proves that the delegator wants to unbond and thus Babylon will consider this BTC delegation unbonded. Delegator's BTC on Bitcoin will be unbonded after time-lock.",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "slashing_tx": {
              "description": "slashing_tx is the unbonding slashing tx",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "unbonding_tx": {
              "description": "unbonding_tx is the transaction which will transfer the funds from staking output to unbonding output. Unbonding output will usually have lower timelock than staking output.",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "CovenantAdaptorSignatures": {
          "description": "CovenantAdaptorSignatures is a list adaptor signatures signed by the covenant with different finality provider's public keys as encryption keys",
          "type": "object",
          "required": [
            "adaptor_sigs",
            "cov_pk"
          ],
          "properties": {
            "adaptor_sigs": {
              "description": "adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Binary"
              }
            },
            "cov_pk": {
              "description": "cov_pk is the public key of the covenant emulator, used as the public key of the adaptor signature",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "SignatureInfo": {
          "description": "SignatureInfo is a BIP-340 signature together with its signer's BIP-340 PK",
          "type": "object",
          "required": [
            "pk",
            "sig"
          ],
          "properties": {
            "pk": {
              "$ref": "#/definitions/Binary"
            },
            "sig": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "delegations": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BtcDelegationsResponse",
      "type": "object",
      "required": [
        "delegations"
      ],
      "properties": {
        "delegations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BtcDelegation"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "BtcDelegation": {
          "type": "object",
          "required": [
            "btc_pk_hex",
            "covenant_sigs",
            "delegator_slashing_sig",
            "end_height",
            "fp_btc_pk_list",
            "params_version",
            "slashed",
            "slashing_tx",
            "staker_addr",
            "staking_output_idx",
            "staking_tx",
            "start_height",
            "total_sat",
            "unbonding_time",
            "undelegation_info"
          ],
          "properties": {
            "btc_pk_hex": {
              "description": "btc_pk_hex is the Bitcoin secp256k1 PK of the BTC delegator. The PK follows encoding in BIP-340 spec in hex format",
              "type": "string"
            },
            "covenant_sigs": {
              "description": "covenant_sigs is a list of adaptor signatures on the slashing tx by each covenant member. It will be a part of the witness for the staking tx output.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CovenantAdaptorSignatures"
              }
            },
            "delegator_slashing_sig": {
              "description": "delegator_slashing_sig is the signature on the slashing tx by the delegator (i.e. SK corresponding to btc_pk) as string hex. It will be a part of the witness for the staking tx output.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "end_height": {
              "description": "end_height is the end height of the BTC delegation it is the end BTC height of the time-lock - w",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "fp_btc_pk_list": {
              "description": "fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that this BTC delegation delegates to",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "params_version": {
              "description": "params version used to validate the delegation",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "slashed": {
              "description": "slashed is used to indicate whether a given delegation is related to a slashed FP",
              "type": "boolean"
            },
            "slashing_tx": {
              "description": "slashing_tx is the slashing tx",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "staker_addr": {
              "description": "staker_addr is the address to receive rewards from BTC delegation",
              "type": "string"
            },
            "staking_output_idx": {
              "description": "staking_output_idx is the index of the staking output in the staking tx",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "staking_tx": {
              "description": "staking_tx is the staking tx",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "start_height": {
              "description": "start_height is the start BTC height of the BTC delegation. It is the start BTC height of the time-lock",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "total_sat": {
              "description": "total_sat is the total BTC stakes in this delegation, quantified in satoshi",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "unbonding_time": {
              "description": "unbonding_time is used in unbonding output time-lock path and in slashing transactions change outputs",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "undelegation_info": {
              "description": "undelegation_info is the undelegation info of this delegation.",
              "allOf": [
                {
                  "$ref": "#/definitions/BtcUndelegationInfo"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "BtcUndelegationInfo": {
          "type": "object",
          "required": [
            "covenant_slashing_sigs",
            "covenant_unbonding_sig_list",
            "delegator_slashing_sig",
            "delegator_unbonding_sig",
            "slashing_tx",
            "unbonding_tx"
          ],
          "properties": {
            "covenant_slashing_sigs": {
              "description": "covenant_slashing_sigs is a list of adaptor signatures on the unbonding slashing tx by each covenant member It will be a part of the witness for the staking tx output.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CovenantAdaptorSignatures"
              }
            },
            "covenant_unbonding_sig_list": {
              "description": "covenant_unbonding_sig_list is the list of signatures on the unbonding tx by covenant members",
              "type": "array",
              "items": {
                "$ref": "#/definitions/SignatureInfo"
              }
            },
            "delegator_slashing_sig": {
              "description": "delegator_slashing_sig is the signature on the slashing tx by the delegator (i.e. SK corresponding to btc_pk). It will be a part of the witness for the unbonding tx output.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "delegator_unbonding_sig": {
              "description": "delegator_unbonding_sig is the signature on the unbonding tx by the delegator (i.e. SK corresponding to btc_pk). It effectively proves that the delegator wants to unbond and thus Babylon will consider this BTC delegation unbonded. Delegator's BTC on Bitcoin will be unbonded after time-lock.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "slashing_tx": {
              "description": "slashing_tx is the unbonding slashing tx",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "unbonding_tx": {
              "description": "unbonding_tx is the transaction which will transfer the funds from staking output to unbonding output. Unbonding output will usually have lower timelock than staking output.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        },
        "CovenantAdaptorSignatures": {
          "type": "object",
          "required": [
            "adaptor_sigs",
            "cov_pk"
          ],
          "properties": {
            "adaptor_sigs": {
              "description": "adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key",
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                }
              }
            },
            "cov_pk": {
              "description": "cov_pk is the public key of the covenant emulator, used as the public key of the adaptor signature",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        },
        "SignatureInfo": {
          "type": "object",
          "required": [
            "pk",
            "sig"
          ],
          "properties": {
            "pk": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "sig": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        }
      }
    },
    "delegations_by_f_p": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DelegationsByFPResponse",
      "type": "object",
      "required": [
        "hashes"
      ],
      "properties": {
        "hashes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "finality_provider": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FinalityProvider",
      "type": "object",
      "required": [
        "addr",
        "btc_pk_hex",
        "commission",
        "consumer_id",
        "slashed_btc_height",
        "slashed_height"
      ],
      "properties": {
        "addr": {
          "description": "addr is the bech32 address identifier of the finality provider",
          "type": "string"
        },
        "btc_pk_hex": {
          "description": "btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider the PK follows encoding in BIP-340 spec in hex format",
          "type": "string"
        },
        "commission": {
          "description": "commission defines the commission rate of the finality provider.",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "consumer_id": {
          "description": "consumer_id is the ID of the consumer that the finality provider is operating on.",
          "type": "string"
        },
        "description": {
          "description": "description defines the description terms for the finality provider",
          "anyOf": [
            {
              "$ref": "#/definitions/FinalityProviderDescription"
            },
            {
              "type": "null"
            }
          ]
        },
        "pop": {
          "description": "pop is the proof of possession of the babylon_pk and btc_pk",
          "anyOf": [
            {
              "$ref": "#/definitions/ProofOfPossessionBtc"
            },
            {
              "type": "null"
            }
          ]
        },
        "slashed_btc_height": {
          "description": "slashed_btc_height is the BTC height on which the finality provider is slashed",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "slashed_height": {
          "description": "slashed_height is the height on which the finality provider is slashed",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "FinalityProviderDescription": {
          "type": "object",
          "required": [
            "details",
            "identity",
            "moniker",
            "security_contact",
            "website"
          ],
          "properties": {
            "details": {
              "description": "details is the details of the finality provider",
              "type": "string"
            },
            "identity": {
              "description": "identity is the identity of the finality provider",
              "type": "string"
            },
            "moniker": {
              "description": "moniker is the name of the finality provider",
              "type": "string"
            },
            "security_contact": {
              "description": "security_contact is the security contact of the finality provider",
              "type": "string"
            },
            "website": {
              "description": "website is the website of the finality provider",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ProofOfPossessionBtc": {
          "description": "ProofOfPossessionBtc is the proof of possession that a Babylon secp256k1 secret key and a Bitcoin secp256k1 secret key are held by the same person",
          "type": "object",
          "required": [
            "btc_sig",
            "btc_sig_type"
          ],
          "properties": {
            "btc_sig": {
              "description": "btc_sig is the signature generated via sign(sk_btc, babylon_sig) the signature follows encoding in either BIP-340 spec or BIP-322 spec",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "btc_sig_type": {
              "description": "btc_sig_type indicates the type of btc_sig in the pop",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "finality_provider_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FinalityProviderInfo",
      "type": "object",
      "required": [
        "btc_pk_hex",
        "power"
      ],
      "properties": {
        "btc_pk_hex": {
          "description": "`btc_pk_hex` is the Bitcoin secp256k1 PK of this finality provider. The PK follows encoding in BIP-340 spec in hex format",
          "type": "string"
        },
        "power": {
          "description": "`power` is the aggregated power of this finality provider. The power is calculated based on the amount of BTC delegated to this finality provider",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "finality_providers": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FinalityProvidersResponse",
      "type": "object",
      "required": [
        "fps"
      ],
      "properties": {
        "fps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FinalityProvider"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "FinalityProvider": {
          "type": "object",
          "required": [
            "addr",
            "btc_pk_hex",
            "commission",
            "consumer_id",
            "slashed_btc_height",
            "slashed_height"
          ],
          "properties": {
            "addr": {
              "description": "addr is the bech32 address identifier of the finality provider",
              "type": "string"
            },
            "btc_pk_hex": {
              "description": "btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider the PK follows encoding in BIP-340 spec in hex format",
              "type": "string"
            },
            "commission": {
              "description": "commission defines the commission rate of the finality provider.",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "consumer_id": {
              "description": "consumer_id is the ID of the consumer that the finality provider is operating on.",
              "type": "string"
            },
            "description": {
              "description": "description defines the description terms for the finality provider",
              "anyOf": [
                {
                  "$ref": "#/definitions/FinalityProviderDescription"
                },
                {
                  "type": "null"
                }
              ]
            },
            "pop": {
              "description": "pop is the proof of possession of the babylon_pk and btc_pk",
              "anyOf": [
                {
                  "$ref": "#/definitions/ProofOfPossessionBtc"
                },
                {
                  "type": "null"
                }
              ]
            },
            "slashed_btc_height": {
              "description": "slashed_btc_height is the BTC height on which the finality provider is slashed",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "slashed_height": {
              "description": "slashed_height is the height on which the finality provider is slashed",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "FinalityProviderDescription": {
          "type": "object",
          "required": [
            "details",
            "identity",
            "moniker",
            "security_contact",
            "website"
          ],
          "properties": {
            "details": {
              "description": "details is the details of the finality provider",
              "type": "string"
            },
            "identity": {
              "description": "identity is the identity of the finality provider",
              "type": "string"
            },
            "moniker": {
              "description": "moniker is the name of the finality provider",
              "type": "string"
            },
            "security_contact": {
              "description": "security_contact is the security contact of the finality provider",
              "type": "string"
            },
            "website": {
              "description": "website is the website of the finality provider",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ProofOfPossessionBtc": {
          "description": "ProofOfPossessionBtc is the proof of possession that a Babylon secp256k1 secret key and a Bitcoin secp256k1 secret key are held by the same person",
          "type": "object",
          "required": [
            "btc_sig",
            "btc_sig_type"
          ],
          "properties": {
            "btc_sig": {
              "description": "btc_sig is the signature generated via sign(sk_btc, babylon_sig) the signature follows encoding in either BIP-340 spec or BIP-322 spec",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "btc_sig_type": {
              "description": "btc_sig_type indicates the type of btc_sig in the pop",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "finality_providers_by_power": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FinalityProvidersByPowerResponse",
      "type": "object",
      "required": [
        "fps"
      ],
      "properties": {
        "fps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FinalityProviderInfo"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "FinalityProviderInfo": {
          "type": "object",
          "required": [
            "btc_pk_hex",
            "power"
          ],
          "properties": {
            "btc_pk_hex": {
              "description": "`btc_pk_hex` is the Bitcoin secp256k1 PK of this finality provider. The PK follows encoding in BIP-340 spec in hex format",
              "type": "string"
            },
            "power": {
              "description": "`power` is the aggregated power of this finality provider. The power is calculated based on the amount of BTC delegated to this finality provider",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "params": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Params",
      "description": "Params define Consumer-selectable BTC staking parameters",
      "type": "object",
      "required": [
        "btc_network",
        "covenant_pks",
        "covenant_quorum",
        "min_slashing_tx_fee_sat",
        "slashing_address",
        "slashing_rate"
      ],
      "properties": {
        "btc_network": {
          "$ref": "#/definitions/Network"
        },
        "covenant_pks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "covenant_quorum": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "min_slashing_tx_fee_sat": {
          "description": "`min_slashing_tx_fee_sat` is the minimum amount of tx fee (quantified in Satoshi) needed for the pre-signed slashing tx",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "slashing_address": {
          "description": "`slashing_address` is the address that the slashed BTC goes to. The address is in string format on Bitcoin.",
          "type": "string"
        },
        "slashing_rate": {
          "description": "`slashing_rate` determines the portion of the staked amount to be slashed, expressed as a decimal (e.g. 0.5 for 50%).",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Network": {
          "type": "string",
          "enum": [
            "mainnet",
            "testnet",
            "signet",
            "regtest"
          ]
        }
      }
    }
  }
}
